package graph;

import org.junit.Test;
import static org.junit.Assert.*;
import java.util.List;
import java.util.ArrayList;
import java.util.HashMap;
import graph.DirectedGraph;
import java.util.Collections;



/** Unit tests for the Traversal class.
 *  @author Yuxi Chen
 */
public class PathsTesting {
    private class SSPTester extends SimpleShortestPaths {
        /** The shortest paths in G from SOURCE. */
        public SSPTester(Graph G, int source) {
            this(G, source, 0);
        }

        /** A shortest path in G from SOURCE to DEST. */
        public SSPTester(Graph G, int source, int dest) {
            super(G, source, dest);
            _weights = new HashMap<Integer, Double>();
            _G = G;
            _currPredecessor = new HashMap<Integer, Integer>();
            _source = source;
            _dest = dest;
            for (Integer current : _weights.keySet()) {
                System.out.println("Our current is: " + current + " and the weight is: " + Double.POSITIVE_INFINITY);
                _weights.put(current, Double.POSITIVE_INFINITY);
            }

        }

        @Override
        protected double getWeight(int u, int v) {
            int[] currArray = {u, v};

            boolean notContains = true;
            for (int[] current : _G.edges()) {
                if (current.equals(currArray)) {
                    notContains = false;
                    break;
                }
            }
            if (notContains) {
                return Double.POSITIVE_INFINITY;
            }


            LabeledGraph h = ((LabeledGraph) _G);
            return ((double) h.getLabel(u, v));
        }

        

        @Override
        public int getPredecessor(int v) {
            if (!_currPredecessor.keySet().contains(v)) {
                return 0;
            }
            return _currPredecessor.get(v);
        }

    /** This holds the information about my weights. */
    private HashMap<Integer, Double> _weights;

    private HashMap<Integer, Integer> _currPredecessor;

    /** This holds a copy of the current graph I'm working with. */
    private Graph _G;

    private int _source;

    private int _dest;

    }

}
