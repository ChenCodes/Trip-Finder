package graph;

import java.util.ArrayList;
import java.util.Iterator;
import java.util.Arrays;

/* See restrictions in Graph.java. */

/** Represents a general unlabeled directed graph whose vertices are denoted by
 *  positive integers. Graphs may have self edges.
 *
 *  @author Yuxi Chen
 */
public class DirectedGraph extends GraphObj {

    @Override
    public boolean isDirected() {
        return true;
    }

    @Override
    public int inDegree(int v) {
        inDegreePred = this.findPred(v);
        int arrivingVertices = inDegreePred.size();
        return arrivingVertices;
    }

    @Override
    public int predecessor(int v, int k) {
        pred = this.findPred(v);
        if (k < pred.size()) {
            int currPred = pred.get(k);    
            return currPred;
        } else {
            return 0;
        }
    }

    @Override
    public Iteration<Integer> predecessors(int v) {
        Iterator<Integer> predecessorsArray = this.findPred(v).iterator(); 
        Iteration<Integer> predArray = Iteration.iteration(predecessorsArray);
        return predArray;

    }

    /** This holds an arraylist of a given vertices' values. */
    private ArrayList<Integer> inDegreePred;

    /** This also holds an arraylist of a given vertices' values. */
    private ArrayList<Integer> pred;

}
