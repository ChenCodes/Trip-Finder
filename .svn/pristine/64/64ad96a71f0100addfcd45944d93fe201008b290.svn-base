package graph;

import org.junit.Test;
import static org.junit.Assert.*;
import java.util.Iterator;
import java.util.Arrays;
import java.util.ArrayList;
import java.util.List;

/** Unit tests for the Graph class.
 *  @author Yuxi Chen
 */
public class GraphTesting {


    // @Test
    // public void removeTest() {
    //     DirectedGraph de = new DirectedGraph();
    //     de.add();
    //     de.add();
    //     de.add();
    //     de.add();
    //     de.add(1, 2);
    //     de.add(2, 3);
    //     de.add(2, 4);
    //     de.add(2, 2);
    //     de.remove(1);
    //     de.remove(2, 4);
    //     de.remove(2, 2);
    //     assertEquals(3, de.vertexSize());
    //     assertEquals(1, de.edgeSize());
    // }

    // @Test
    // public void removeTest2() {
    //     UndirectedGraph de = new UndirectedGraph();
    //     de.add();
    //     de.add();
    //     de.add();
    //     de.add();
    //     de.add(1, 2);
    //     de.add(2, 3);
    //     de.add(2, 4);
    //     de.add(2, 2);
    //     de.remove(1);
    //     de.remove(2, 4);
    //     // de.remove(2, 2);
    //     assertEquals(3, de.vertexSize());
    //     assertEquals(2, de.edgeSize());
    // }


    // @Test
    // public void removeTest3() {
    //     UndirectedGraph g = new UndirectedGraph();
    //     g.add();
    //     g.add();
    //     g.add();
    //     g.add();
    //     g.add();
    //     g.add(1, 2);
    //     g.add(1, 3);
    //     g.add(1, 4);
    //     g.add(1, 5);
    //     g.add(1, 1);

    //     g.remove(2);
    //     System.out.println("My edge size is: " + g.edgeSize());
    // }

    // @Test
    // public void removeTest3() {
    //     DirectedGraph g = new DirectedGraph();
    //     g.add();
    //     g.add();
    //     g.add();
    //     g.add();
    //     g.add();
    //     g.add();
    //     g.add(1, 2);
    //     g.add(1, 3);
    //     g.add(1, 4);
    //     g.add(1, 5);
    //     g.add(1, 1);
    //     g.add(3, 6);
    //     g.remove(1);

    //     System.out.println("My edge size is: " + g.edgeSize());
    // }

    // @Test
    // public void removeTest3() {
    //     UndirectedGraph g = new UndirectedGraph();
    //     g.add();
    //     g.add();
    //     g.add();
    //     g.add();
    //     g.add();
    //     g.add();
    //     g.add(1, 2);
    //     g.add(1, 3);
    //     g.add(1, 4);
    //     g.add(1, 5);
    //     g.add(1, 1);
    //     int counter = 0;

        

    //     System.out.println("My edge size is: " + g.edgeSize());
    // }

    @Test
    public void removeTest4() {
        DirectedGraph g = new DirectedGraph();
        g.add(); g.add(); g.add(); g.add(); g.add(); 
        g.add(1, 1);
        g.add(1, 2);
        g.add(1, 3);
        g.add(1, 4);
        g.add(1, 5);
        g.add(2, 2);
        g.add(3, 3);
        g.add(4, 4);
        g.add(5, 5);
        g.remove(1);
        System.out.println("Be 4 please" + g.edgeSize());
        assertEquals(0, g.predecessor(1, 0));
        assertEquals(5, g.predecessor(5, 0));
        assertEquals(4, g.predecessor(4, 0));
        assertEquals(3, g.predecessor(3, 0));
        assertEquals(2, g.predecessor(2, 0));
    }

    // @Test
    // public void removeTest5() {
    //     UndirectedGraph g = new UndirectedGraph();
    //     g.add(); g.add(); g.add(); g.add(); g.add(); 
    //     g.add(1, 1);
    //     g.add(1, 2);
    //     g.add(1, 3);
    //     g.add(1, 4);
    //     g.add(1, 5);
    //     g.add(2, 2);
    //     g.add(3, 3);
    //     g.add(4, 4);
    //     g.add(5, 5);
    //     g.remove(1);
    //     System.out.println("Be 4 please" + g.edgeSize());
    //     assertEquals(0, g.predecessor(1, 0));
    //     assertEquals(5, g.predecessor(5, 0));
    //     assertEquals(4, g.predecessor(4, 0));
    //     assertEquals(3, g.predecessor(3, 0));
    //     assertEquals(2, g.predecessor(2, 0));
    // }

    @Test
    public void removeTest6() {
        UndirectedGraph g = new UndirectedGraph();
        g.add();
        g.add();
        g.add();
        g.add();
        g.add();
        g.add(1, 1);
        g.add(1, 2);
        g.add(1, 3);
        g.add(1, 4);
        g.add(1, 5);
        g.add(2, 3);
        g.add(2, 4);
        g.remove(2);
        List<Integer> newList = new ArrayList<Integer>();
        System.out.println(g.predecessor(1, 0));
        System.out.println(g.predecessor(1, 1));
        System.out.println(g.predecessor(1, 2));


        for (Integer current : g.predecessors(1)) {
            System.out.println(current);
            newList.add(current);
        }
        System.out.println(newList);
    }






    // @Test 
    // public void coolTest() {
    // UndirectedGraph g = new UndirectedGraph();
    //     g.add();
    //     g.add();
    //     g.add();
    //     g.add();
    //     g.add();
    //     g.add();
    //     g.add();
    //     g.add();
    //     g.add();
    //     g.add();
    //     g.add(8, 10);
    //     g.add(1, 8);
    //     g.add(1, 4);
    //     g.add(3, 7);
    //     g.add(7, 10);
    //     g.add(3, 8);
    //     g.add(1, 3);
    //     g.add(8, 9);
    //     g.add(3, 2);
    //     g.remove(2);
    //     assertEquals("is in the map but should not be", true, g.contains(3));
    //     assertEquals("is in the map but should not be", false, g.contains(2, 3));
    //     assertEquals("is in the map but should not be", false, g.contains(3, 2));
    //     // System.out.println("hello");
    //     // System.out.println(g.currentMap.keySet());
    //     for (int i : g.currentMap.keySet()) {
    //         // System.out.println(g.currentMap.size());
    //         for (int k : g.currentMap.get(i)) {
    //             // System.out.println(g.currentMap.get(i));

    //             System.out.println(i + "->" + k);
    //     }
    //     }
    // }


    // @Test
    // public void removeNonexistent() {
    //     UndirectedGraph g = new UndirectedGraph();
    //     g.remove(1);
    // }


    // @Test
    // public void edgesIteratorTest() {
    //     UndirectedGraph g = new UndirectedGraph();
    //     g.add();
    //     g.add();
    //     g.add();
    //     g.add(1, 2);
    //     g.add(1, 2);
    //     g.add(2, 3);
    //     g.add(2, 1);
    //     Iteration<int[]> currEdges = g.edges();
    //     currEdges.next();
    //     currEdges.next();
    // }

    // @Test
    // public void emptyGraph2Directed() {
    //     DirectedGraph g = new DirectedGraph();
    //     assertEquals(0, g.successor(2, 0));
    //     assertEquals(0, g.predecessor(2, 0));
    //     assertEquals(false, g.contains(2, 0));
    //     g.add();
    //     g.add();
    //     g.add(1, 2);
    //     assertEquals(0, g.successor(2, 0));
    // }

    // @Test
    // public void emptyGraph2Undirected() {
    //     UndirectedGraph g = new UndirectedGraph();
    //     g.add();
    //     g.add();
    //     g.add(1, 2);
    //     assertEquals(1, g.successor(2, 0));
    // }

    // @Test
    // public void selfEdge() {
    //     UndirectedGraph g = new UndirectedGraph();
    //     g.add();
    //     g.add();
    //     g.add(1, 2);
    //     g.add(2, 2);
    //     assertEquals(1, g.outDegree(2));
    //     assertEquals(2, g.inDegree(2));
    //     assertEquals(1, g.successor(2, 0));
    //     assertEquals(2, g.successor(2, 1));
    //     assertEquals(1, g.predecessor(2, 0));
    //     assertEquals(2, g.predecessor(2, 1));
    // }



    // @Test
    // public void successorDirected2() {
    //     DirectedGraph g = new DirectedGraph();
    //     g.add();
    //     g.add();
    //     g.add();
    //     g.add();
    //     g.add(2, 1);
    //     g.add(1, 3);
    //     g.add(1, 4);
    //     g.remove(2);
    //     assertEquals(0, g.successor(2, 0));
    //     assertEquals(0, g.predecessor(2, 0));
    // }

    // @Test
    // public void successorUndirected2() {
    //     UndirectedGraph g = new UndirectedGraph();
    //     g.add();
    //     g.add();
    //     g.add();
    //     g.add();
    //     g.add(2, 1);
    //     g.add(1, 3);
    //     g.add(1, 4);
    //     g.remove(2);
    //     assertEquals(3, g.successor(1, 0));
    //     assertEquals(4, g.successor(1, 1));
    //     assertEquals(0, g.successor(5, 5));
    //     assertEquals(0, g.predecessor(10, 0));
    // }

    // @Test
    // public void vertexTest2Undirected() {
    //     UndirectedGraph g = new UndirectedGraph();
    //     g.add();
    //     g.add();
    //     g.add();
    //     g.add();
    //     g.add();
    //     g.add(3, 1);
    //     g.add(4, 1);
    //     g.add(5, 1);
    //     g.remove(4);
    //     Iterator<Integer> currItems = g.predecessors(1);
    // }

    // @Test
    // public void vertexTest2Directed() {
    //     DirectedGraph g = new DirectedGraph();
    //     g.add();
    //     g.add();
    //     g.add();
    //     g.add();
    //     g.add();
    //     g.add(3, 1);
    //     g.add(4, 1);
    //     g.add(5, 1);
    //     g.predecessors(1);
    //     g.remove(4);
    //     Iterator<Integer> currItems = g.predecessors(1);
    //     assertEquals(3, (int) currItems.next());
    //     assertEquals(5, (int) currItems.next());
    //     assertEquals(false, currItems.hasNext());
    //     DirectedGraph h = new DirectedGraph();
    //     h.add();
    //     h.add();
    //     h.add();
    //     h.add(2, 3);
    //     h.add(1, 3);
    //     h.remove(1);
    //     Iterator<Integer> currItems2 = h.predecessors(3);
    //     assertEquals(true, currItems2.hasNext());
    //     assertEquals(2, (int) currItems2.next());
    //     assertEquals(false, currItems2.hasNext());
    // }

    // @Test
    // public void containsDirected() {
    //     DirectedGraph g = new DirectedGraph();
    //     g.add();
    //     g.add();
    //     g.add();
    //     g.add(1, 2);
    //     g.add(2, 3);
    //     assertEquals(false, g.contains(3, 2));
    //     assertEquals(false, g.contains(4, 10));
    //     assertEquals(false, g.contains(1, 30));
    //     assertEquals(true, g.contains(1, 2));
    // }

    // @Test
    // public void containsUndirected() {
    //     UndirectedGraph g = new UndirectedGraph();
    //     g.add();
    //     g.add();
    //     g.add();
    //     g.add(1, 2);
    //     g.add(2, 3);
    //     g.add(3, 2);
    //     assertEquals(true, g.contains(3, 2));
    //     assertEquals(false, g.contains(10, 13));
    //     assertEquals(false, g.contains(1, 13));
    //     assertEquals(true, g.contains(2, 3));
    //     assertEquals(true, g.contains(2, 1));
    // }

    // @Test
    // public void vertexTestUndirected() {
    //     UndirectedGraph g = new UndirectedGraph();
    //     g.add();
    //     g.add();
    //     g.add();
    //     g.add();
    //     g.add();
    //     g.add(1, 3);
    //     g.add(1, 4);
    //     g.add(1, 5);
    //     g.remove(4);
    //     Iterator<int[]> currEdges = g.edges();
    //     assertEquals(3, g.successor(1, 0));
    //     assertEquals(5, g.successor(1, 1));
    // }

    // @Test
    // public void vertexTestDirected() {
    //     DirectedGraph g = new DirectedGraph();
    //     g.add();
    //     g.add();
    //     g.add();
    //     g.add();
    //     g.add();
    //     g.add(1, 3);
    //     g.add(1, 4);
    //     g.add(1, 5);
    //     g.remove(4);
    //     assertEquals(3, g.successor(1, 0));
    //     assertEquals(5, g.successor(1, 1));
    // }
    // @Test
    // public void addBadEdge() {
    //     UndirectedGraph g = new UndirectedGraph();
    //     g.add();
    //     g.add();
    //     g.add();
    //     g.add(1, 2);
    //     g.add(1, 2);
    //     g.add(2, 3);
    //     g.add(2, 1);
    //     Iteration<int[]> currEdges = g.edges();
    //     currEdges.next();
    //     currEdges.next();
    //     assertEquals(false, currEdges.hasNext());
    // }

    // @Test
    // public void contains() {
    //     UndirectedGraph g = new UndirectedGraph();
    //     g.add();
    //     g.add();
    //     g.add(1, 2);
    //     g.add(2, 1);
    //     assertEquals(true, g.contains(2, 1));
    // }

    // @Test
    // public void edgesIterator() {
    //     UndirectedGraph g = new UndirectedGraph();
    //     g.add();
    //     g.add();
    //     g.add();
    //     g.add(1, 2);
    //     g.add(1, 3);
    //     g.add();
    //     g.add(1, 4);
    //     Iterator<int[]> currEdges = g.edges();
    //     assertEquals(true, currEdges.hasNext());
    //     int[] arrayOne = {1, 2};
    //     Arrays.equals(arrayOne, currEdges.next());
    //     int[] arrayTwo = {1, 3};
    //     Arrays.equals(arrayTwo, currEdges.next());
    //     int[] arrayThree = {1, 4};
    //     Arrays.equals(arrayThree, currEdges.next());
    // }

    // @Test
    // public void predecessorsUndirected() {
    //     UndirectedGraph g = new UndirectedGraph();
    //     g.add();
    //     g.add();
    //     g.add();
    //     g.add(1, 2);
    //     g.add(3, 2);
    //     g.add();
    //     g.add(4, 2);
    //     Iterator<Integer> currPred = g.predecessors(2);
    //     assertEquals(true, currPred.hasNext());
    //     assertEquals(1, (int) currPred.next());
    //     assertEquals(3, (int) currPred.next());
    //     assertEquals(4, (int) currPred.next());
    //     assertEquals(false, currPred.hasNext());
    // }

    // @Test
    // public void predecessorUndirected() {
    //     UndirectedGraph g = new UndirectedGraph();
    //     g.add();
    //     g.add();
    //     g.add();
    //     g.add(1, 2);
    //     g.add(1, 3);
    //     g.add();
    //     g.add(1, 4);
    //     g.add();
    //     g.add(5, 3);
    //     assertEquals(1, g.predecessor(3, 0));
    //     assertEquals(5, g.predecessor(3, 1));
    // }

    // @Test
    // public void predecessorDirected() {
    //     DirectedGraph g = new DirectedGraph();
    //     g.add();
    //     g.add();
    //     g.add();
    //     g.add(1, 3);
    //     g.add(2, 3);
    //     assertEquals(2, g.predecessor(3, 1));
    //     assertEquals(1, g.predecessor(3, 0));
    // }


    // @Test
    // public void inDegree() {
    //     DirectedGraph g = new DirectedGraph();
    //     g.add();
    //     g.add();
    //     g.add();
    //     g.add(1, 2);
    //     g.add(3, 2);
    //     g.add();
    //     g.add();
    //     g.add(4, 2);
    //     g.add(5, 2);
    //     g.inDegree(2);
    //     assertEquals(4, g.inDegree(2));
    // }

    // @Test
    // public void edgesIterate() {
    //     UndirectedGraph g = new UndirectedGraph();
    //     g.add();
    //     g.add();
    //     g.add();
    //     g.add(1, 2);
    //     g.add(1, 3);
    //     Iteration<int[]> edges = g.edges();
    //     int[] first = edges.next();
    //     int[] second = edges.next();
    // }

    // @Test
    // public void mine() {
    //     DirectedGraph g = new DirectedGraph();
    //     g.add();
    //     g.add();
    //     g.add();
    //     assertEquals(true, g.mine(1));
    //     assertEquals(false, g.mine(5));
    // }

    // @Test
    // public void successorUndirected() {
    //     UndirectedGraph g = new UndirectedGraph();
    //     g.add();
    //     g.add();
    //     g.add();
    //     g.add(1, 3);
    //     g.add(1, 2);
    //     assertEquals(2, g.successor(1, 1));
    //     assertEquals(1, g.predecessor(2, 0));

    // }

    // @Test
    // public void containsEdge() {
    //     DirectedGraph g = new DirectedGraph();
    //     g.add();
    //     g.add();
    //     g.add();
    //     g.add(1, 3);
    //     g.contains(1, 3);
    //     assertEquals(true, g.contains(1, 3));
    //     assertEquals(false, g.contains(2, 4));
    //     UndirectedGraph h = new UndirectedGraph();
    //     h.add();
    //     h.add();
    //     h.add();
    //     h.add(1, 3);
    //     assertEquals(true, h.contains(1, 3));
    //     assertEquals(false, h.contains(2, 4));
    // }

    // @Test
    // public void successor() {
    //     DirectedGraph g = new DirectedGraph();
    //     g.add();
    //     g.add();
    //     g.add();
    //     g.add(1, 3);
    //     g.add(3, 2);
    //     g.add(2, 1);
    //     g.add(2, 3);
    //     g.add();
    //     g.remove(2, 1);
    //     g.remove(2);
    //     g.add(1, 4);
    //     g.add();
    // }

    // @Test
    // public void addBadVertex() {
    //     DirectedGraph g = new DirectedGraph();
    //     g.add();
    //     g.add();
    //     g.add();
    //     g.add(1, 3);
    //     g.add(3, 2);
    //     g.add(2, 1);
    //     g.add(2, 3);
    //     g.add();
    //     g.remove(2);
    //     g.add(1, 4);
    //     g.add();

    //     g.add(1, 15);
    //     g.add(15, 1);
    // }

    // @Test
    // public void addVertex() {
    //     DirectedGraph g = new DirectedGraph();
    //     g.add();
    //     g.add();
    //     g.add();
    //     g.add(1, 3);
    //     g.add(3, 2);
    //     g.add(2, 1);
    //     g.add(2, 3);
    //     g.add();
    //     g.remove(2, 1);
    //     g.remove(2);
    //     g.add(1, 4);
    //     g.add();
    //     assertEquals(0, g.predecessor(2, 0));
    // }


    // @Test
    // public void testIterate() {
    //     DirectedGraph g = new DirectedGraph();
    //     g.add();
    //     g.add();
    //     g.add();
    //     g.add(1, 3);
    //     g.add(3, 2);
    //     g.add(2, 1);
    //     g.add(2, 3);
    //     g.add();
    //     g.remove(2, 1);
    //     g.remove(2);
    // }

    // @Test
    // public void removeVertexDirected() {
    //     DirectedGraph g = new DirectedGraph();
    //     g.add();
    //     g.add();
    //     g.add();
    //     g.add(1, 3);
    //     g.add(3, 2);
    //     g.add(2, 1);
    //     g.add(2, 3);
    //     g.add();
    //     g.add(3, 4);
    //     g.remove(2);
    //     Iteration<int[]> currEdges = g.edges();
    //     currEdges.next();
    //     currEdges.next();
    //     assertEquals(false, currEdges.hasNext());
    // }

    // @Test
    // public void removeVertexUndirected() {
    //     UndirectedGraph g = new UndirectedGraph();
    //     g.add();
    //     g.add();
    //     g.add();
    //     g.add(1, 3);
    //     g.add(3, 2);
    //     g.add(2, 1);
    //     g.add(2, 3);
    //     g.add();
    //     g.add(3, 4);
    //     g.remove(2);
    //     Iteration<int[]> currEdges = g.edges();

    //     UndirectedGraph h = new UndirectedGraph();
    //     h.add();
    //     h.add();
    //     h.add();
    //     h.add(1, 3);
    //     h.add(2, 3);
    //     h.remove(1);
    //     assertEquals(2, h.predecessor(3, 0));
    // }

    // @Test
    // public void removeEdges() {
    //     DirectedGraph g = new DirectedGraph();
    //     g.add();
    //     g.add();
    //     g.add();
    //     g.add(1, 3);
    //     g.add(3, 2);
    //     g.add(2, 1);
    //     g.add(2, 3);
    //     g.add();
    //     g.remove(2, 1);
    //     assertEquals(3, g.successor(2, 0));
    // }


    // @Test
    // public void addEdges() {
    //     DirectedGraph g = new DirectedGraph();
    //     g.add();
    //     g.add();
    //     g.add();
    //     g.add(1, 3);
    //     g.add(3, 2);
    //     g.add(2, 1);
    //     g.add();
    //     g.add(4, 3);
    //     assertEquals(2, g.successor(3, 0));
    //     assertEquals(1, g.predecessor(3, 0));
    //     assertEquals(4, g.predecessor(3, 1));
    //     assertEquals(0, g.predecessor(3, 2));
    //     g.add(2, 3);
    //     assertEquals(3, g.successor(2, 1));
    //     g.add(2, 3);
    // }

    // @Test
    // public void vertexSize() {
    //     UndirectedGraph g = new UndirectedGraph();
    //     g.add();
    //     g.add();
    //     g.add();
    //     assertEquals(3, g.vertexSize());
    // }

    // @Test
    // public void maxVertex() {
    //     UndirectedGraph g = new UndirectedGraph();
    //     g.add();
    //     g.add();
    //     g.add();
    //     assertEquals(3, g.maxVertex());
    // }

    // @Test
    // public void addingGraph() {
    //     UndirectedGraph g = new UndirectedGraph();
    //     g.add();
    //     g.add();
    //     g.add();
    //     assertEquals("Graph has 3 vertices in it", 3, g.vertexSize());
    //     g.remove(2);
    //     assertEquals("Graph now has 2 vertices in it", 2, g.vertexSize());
    // }

    // @Test
    // public void emptyGraph() {
    //     DirectedGraph g = new DirectedGraph();
    //     assertEquals("Initial graph has vertices", 0, g.vertexSize());
    //     assertEquals("Initial graph has edges", 0, g.edgeSize());
    // }

}
