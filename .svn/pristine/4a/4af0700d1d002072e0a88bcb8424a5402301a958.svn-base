package graph;

import java.util.LinkedList;
import java.util.Collection;

/* See restrictions in Graph.java. */

/** Implements a depth-first traversal of a graph.  Generally, the
 *  client will extend this class, overriding the visit and
 *  postVisit methods, as desired (by default, they do nothing).
 *  @author
 */
public class DepthFirstTraversal extends Traversal {

    /** A depth-first Traversal of G, using FRINGE as the fringe. */
    protected DepthFirstTraversal(Graph G) {
        super(G, new LinkedList<Integer>());
        _G = G;
    }

    @Override
    public boolean isDFS() {
        return true;
    }

    @Override
    protected boolean visit(int v) {
        if (_G.findCurrent(v).size() == 0 && !_G.isDirected()) {
            for (Integer current : _G.findUndirected(v)) {
                if (!super.getMarked().contains(current)) {
                    super._fringeStack.push(current);
                }
            } 
        } else {
        for (Integer current : _G.findCurrent(v)) {
            if (!super.getMarked().contains(current)) {
                super._fringeStack.push(current);
            }
        }
    }

    return super.visit(v);
    }

    @Override
    protected boolean postVisit(int v) {
        return super.postVisit(v);
    }

    // FIXME
    /** This holds the items that I will be traversing over. */
    private Collection<Integer> fringeItems;

    /** This holds my graph object. */
    private Graph _G;

}
