package graph;
import java.util.HashMap;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.Queue;
import java.util.LinkedList;

import java.util.List;
/* See restrictions in Graph.java. */

/** A partial implementation of Graph containing elements common to
 *  directed and undirected graphs.
 * This is a javadoc comment.
 *  @author Yuxi Chen
 */
abstract class GraphObj extends Graph {

    /** A new, empty Graph. */
    GraphObj() {
        currentMap = new HashMap<Integer, ArrayList<Integer>>();
        directedMap = new HashMap<Integer, ArrayList<Integer>>();
        predMap = new HashMap<Integer, ArrayList<Integer>>();
        vertex = 0;
        removedVertices = new ArrayList<Integer>();
        addedVertices = new ArrayList<Integer>();
        edgeIds = new ArrayList<Integer>();
        addedEdge = new ArrayList<int[]>();
        combinedMap = new HashMap<Integer, ArrayList<Integer>>();
    }

    @Override
    protected ArrayList<Integer> findCurrent(int u) {
        return currentMap.get(u);
    }

    /** This helper function takes what we have in this class and brings
    it to directed graph.
     @return
     @param u This is an integer.
     */
    protected ArrayList<Integer> findPred(int u) {
        return directedMap.get(u);
    }

    /** This helper function takes what we have in this class and brings
     it to undirected graph.
     @return
     @param u This is an integer.
     */
    @Override
    protected ArrayList<Integer> findUndirected(int u) {
        return predMap.get(u);
    }


    /** This helper function helps us get the vertices that are in a queue.
        @return
        */
    protected Queue<Integer> queuedVertices() {
        Queue<Integer> queued = new LinkedList<Integer>();
        for (Integer current : addedVertices) {
            queued.add(current);
        }
        return queued;
    }

    /** This helper function helps get the vertices that we removed. */
    protected ArrayList<Integer> removedVertices() {
        return removedVertices;
    }


    /** This helper function helps us get the vertices that we added in.
    @return
    */
    protected ArrayList<Integer> addedVertices() {
        return addedVertices;
    }

    @Override
    public int vertexSize() {
        int size = currentMap.size();
        return size;
    }

    @Override
    public int maxVertex() {
        int max = 0;
        for (Integer current : addedVertices()) {
            if (current > max) {
                max = current;
            }
        }
        return max;
    }

    @Override
    public int edgeSize() {
        int counter = 0;
        for (ArrayList<Integer> value : currentMap.values()) {
            counter += value.size();
        }
        return counter;
    }

    @Override
    public abstract boolean isDirected();

    /** Given a key, we will go and look for the arraylist corresponding
     to it and determine how many neighboring vertices it has.
     @return
     @param v This is an integer.
     */
    @Override
    public int outDegree(int v) {
        if (!addedVertices.contains(v)) {
            return 0;
        }
        int outEdges = currentMap.get(v).size();  
        return outEdges;
    }

    @Override
    public abstract int inDegree(int v);

    @Override
    public boolean contains(int u) {
        if (currentMap.containsKey(u)) {
            return true;
        }
        return false;
    }

    @Override
    public boolean contains(int u, int v) {
        if (!addedVertices.contains(u) || !addedVertices.contains(v)) {
            return false;
        } else {
            if (isDirected()) {
                if (currentMap.get(u).contains(v)) {
                    return true;
                }
            } else {
                if (currentMap.get(u).contains(v)
                    || currentMap.get(v).contains(u)) {
                    return true;
                }
            }
            return false;
        }
    }

    @Override
    /** They require us to have the smallest integer >= 1 that is not already
     a valid vertex. Basically what I'm doing here is seeing if we have any
      vertices that we already removed. */
    public int add() {
        if (removedVertices.size() == 0) {
            vertex += 1;
            currentMap.put(vertex, new ArrayList<Integer>());
            directedMap.put(vertex, new ArrayList<Integer>());
            predMap.put(vertex, new ArrayList<Integer>());
            combinedMap.put(vertex, new ArrayList<Integer>());
            addedVertices.add(vertex);
            return vertex;
        } else {
            int firstRemoved = smallest();
            int counter = 0;
            for (int element : removedVertices) {
                if (element == firstRemoved) {
                    break;
                }
                counter += 1;
            }
            currentMap.put(firstRemoved, new ArrayList<Integer>());
            directedMap.put(firstRemoved, new ArrayList<Integer>());
            predMap.put(firstRemoved, new ArrayList<Integer>());
            combinedMap.put(vertex, new ArrayList<Integer>());
            removedVertices.remove(counter);
            addedVertices.add(firstRemoved);
            return firstRemoved;
        }
    }

    /** This is a helper function to obtain the smallest value inside
     of an arraylist.
     @return
     */
    public int smallest() {
        int minValue = 1000000;
        for (int current : removedVertices) {
            if (current <= minValue) {
                minValue = current;
            }
        }
        return minValue;
    }


    @Override
    /** Here we're trying to add an edge between two vertexes.
    If graph is not undirected, that means we will have 1 -> 2 as
     well as 2 --> 1. */
    public int add(int u, int v) {
        if (!addedVertices.contains(v) || !addedVertices.contains(u)
            || currentMap.get(u).contains(v)) {
            int one = 1;
        } else {
            int edgeIdNumber = edgeId(u, v);
            edgeIds.add(edgeIdNumber);
            int[] w = {u, v};
            if (isDirected()) {
                if (!currentMap.get(u).contains(v)) {
                    currentMap.get(u).add(v);
                    addedEdge.add(w);
                }
                if (!directedMap.get(v).contains(u)) {
                    directedMap.get(v).add(u);
                } else {
                    int two = 2;
                }

            } else {
                if (currentMap.get(u).contains(v)
                    || currentMap.get(v).contains(u)) {
                    int hello = 2;

                } else {
                    if (!currentMap.get(u).contains(v)) {
                        currentMap.get(u).add(v);
                        if (u == v) {
                            combinedMap.get(u).add(v);
                        } else if (u != v) {
                            combinedMap.get(u).add(v);
                            combinedMap.get(v).add(u);
                        }
                        if (!predMap.get(v).contains(u)) {
                            predMap.get(v).add(u);
                        }
                        addedEdge.add(w);
                    } else {
                        return u;
                    }
                }
            }
        }
        return u;
    }

    /** This helper helps remove items from various locations.
    @param v This tells us which item to remove.
    */
    public void removeHelper(int v) {
        for (ArrayList<Integer> items : currentMap.values()) {
            if (items.contains(v)) {
                int counter = 0;
                for (Integer item : items) {
                    if ((int) item == v) {
                        break;
                    }
                    counter += 1;
                }
                items.remove(counter);
            }
        }
        for (ArrayList<Integer> items : directedMap.values()) {
            if (items.contains(v)) {
                int counter = 0;
                for (Integer item : items) {
                    if ((int) item == v) {
                        break;
                    }
                    counter += 1;
                }
                items.remove(counter);
            }
        }
        for (ArrayList<Integer> items : predMap.values()) {
            if (items.contains(v)) {
                int counter = 0;
                for (Integer item : items) {
                    if ((int) item == v) {
                        break;
                    }
                    counter += 1;
                }
                items.remove(counter);
            }
        }
        for (ArrayList<Integer> items : combinedMap.values()) {
            if (items.contains(v)) {
                int counter = 0;
                for (Integer item : items) {
                    if ((int) item == v) {
                        break;
                    }
                    counter += 1;
                }
                items.remove(counter);
            }
        }
    }

    @Override
    public void remove(int v) {
        currentMap.remove(v);
        directedMap.remove(v);
        predMap.remove(v);
        combinedMap.remove(v);
        removeHelper(v);
        int counter = 0;
        for (int i : addedVertices) {
            if (i == v) {
                addedVertices.remove(counter);
                removedVertices.add(v);
                break;
            }
            counter += 1;
        }
        int counterTwo = 0;
        ArrayList<Integer> newIntArray = new ArrayList<Integer>();
        for (int[] current : addedEdge) {
            for (int number : current) {
                if (number == v) {
                    newIntArray.add(counterTwo);
                }
            }
            counterTwo += 1;
        }
        ArrayList<int[]> newAddedEdges = new ArrayList<int[]>();
        for (int i = 0; i < addedEdge.size(); i++) {
            if (newIntArray.contains(i)) {
                continue;
            } else {
                newAddedEdges.add(addedEdge.get(i));
            }
        }
        addedEdge = newAddedEdges;
    }

    @Override
    public void remove(int u, int v) {
        int counter = 0;
        for (int element : currentMap.get(u)) {
            if (element == v) {
                currentMap.get(u).remove(counter);
            }
            counter += 1;
        }
    }

    @Override
    public Iteration<Integer> vertices() {
        if (addedVertices.size() == 0 || addedVertices == null) {
            List<Integer> newList = new ArrayList<Integer>();
            return Iteration.iteration (newList);
        }
        Iterator<Integer> vertexIterate = addedVertices.iterator();
        Iteration<Integer> newVertexIterate =
        Iteration.iteration(vertexIterate);
        return newVertexIterate;
    }

    @Override
    public int successor(int v, int k) {
        if (!addedVertices.contains(v)) {
            return 0;
        }
        int currSuccessor = 0;
        if (!isDirected()) {
            if (combinedMap.get(v).equals(null)) {
                return 0;
            }
            currSuccessor = combinedMap.get(v).get(k);
        } else {
            if (currentMap.get(v).equals(null)) {
                return 0;
            }
            if (currentMap.get(v).size() == 0) {
                return 0;
            }
            currSuccessor = currentMap.get(v).get(k);
        }
        return currSuccessor;
    }

    @Override
    public abstract int predecessor(int v, int k);

    @Override
    public Iteration<Integer> successors(int v) {
        List<Integer> current = new ArrayList<Integer>();
        if (currentMap.get(v) == null || currentMap.get(v).size() == 0)  {
            return Iteration.iteration(current);
        }
        Iterator<Integer> successorIterate = currentMap.get(v).iterator();
        Iteration<Integer> newSuccessorIterate = Iteration.iteration(successorIterate);
        return newSuccessorIterate;
    }

    @Override
    public abstract Iteration<Integer> predecessors(int v);

    @Override
    public Iteration<int[]> edges() {
        if (addedEdge.size() == 0 || addedEdge == null) {
            List<int[]> emptyList = new ArrayList<int[]>();
            return Iteration.iteration(emptyList);
        }
        Iterator<int[]> edgesIterate = addedEdge.iterator();
        Iteration<int[]> newEdgesIterate = Iteration.iteration(edgesIterate);
        return newEdgesIterate;
    }

    @Override
    protected boolean mine(int v) {
        if (!addedVertices.contains(v)) {
            return false;
        }
        return true;
    }

    @Override
    protected void checkMyVertex(int v) {
        if (!addedVertices.contains(v)) {
            throw new IllegalArgumentException("This vertex doesn't exist");
        }
    }

    protected int edgeId(int u, int v) {
        if (u == 0 || v == 0) {
            throw new AssertionError("WHAT GOIN ON");
        }
        int idNumber = 0;
        if (isDirected()) {
            
            idNumber = ((u + v) * (u + v + 1)) / 2 + v;    
            edgeIds.add(idNumber);
            return idNumber;
        } else if (!isDirected()) {
            if (v > u) {
                idNumber = ((v + u) * (v + u + 1))/2 + u;
                edgeIds.add(idNumber);
                return idNumber;
            } else if (u < v) {
                idNumber = ((u + v) * (u + v + 1))/2 + v;
                edgeIds.add(idNumber);
                return idNumber;
            }
        }

        return idNumber;
    }

    /** This holds our graph data structure by having a key which
    is a vertex and values that are other vertices that it is
    adjacent to. This helps us find outdegrees. */
    private HashMap<Integer, ArrayList<Integer>> currentMap;

    /** This holds our graph data structure by having a key
    which is a vertex and values that are other vertices that
    it is adjacent to. The difference between this variable and the above
    variable is that this one helps find indegrees. */
    private HashMap<Integer, ArrayList<Integer>> directedMap;

    /** This keeps track of which number vertex that we're currently on. */
    private int vertex;

    /** This keeps track of which vertices that we have removed. */
    private ArrayList<Integer> removedVertices;

    /** This keeps track of the vertices that I have added. */
    private ArrayList<Integer> addedVertices;

    /** Keeps track of the edgeId of all of my possible edges. */
    private ArrayList<Integer> edgeIds;

    /** Keeps track of all the edges that we have added previously. */
    private ArrayList<int[]> addedEdge;

    /** Keeps track of my predecessors. */
    private HashMap<Integer, ArrayList<Integer>> predMap;

    /** Keeps track of all possible edges. */
    private HashMap<Integer, ArrayList<Integer>> combinedMap;
}

