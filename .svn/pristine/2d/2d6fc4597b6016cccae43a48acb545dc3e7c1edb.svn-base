package graph;

import org.junit.Test;
import static org.junit.Assert.*;
import java.util.Iterator;
import java.util.Arrays;

/** Unit tests for the Graph class.
 *  @author Yuxi Chen
 */
public class GraphTesting {

	@Test
	public void vertexTestUndirected() {
        UndirectedGraph g = new UndirectedGraph();
        g.add();
        g.add();
        g.add();
        g.add();
        g.add();
        g.add(1, 3);
        g.add(1, 4);
        g.add(1, 5);
        g.remove(4);
        assertEquals(3, g.successor(1, 0));
        assertEquals(5, g.successor(1, 1));
	}

    // @Test
    // public void addBadEdge() {
    //     UndirectedGraph g = new UndirectedGraph();
    //     g.add();
    //     g.add();
    //     g.add();
    //     g.add(1, 2);
    //     g.add(1, 2);
    //     g.add(2, 3);
    //     g.add(2, 1);
    //     Iteration<int[]> currEdges = g.edges();
    //     currEdges.next();
    //     currEdges.next();
    //     currEdges.next();
    //     assertEquals(false, currEdges.hasNext());
    // }

    // @Test 
    // public void contains() {
    //     UndirectedGraph g = new UndirectedGraph();
    //     g.add();
    //     g.add();
    //     g.add(1, 2);
    //     g.add(2, 1);
    //     assertEquals(true, g.contains(2, 1));
    // }

    // @Test
    // public void edgesIterator() {
    //     UndirectedGraph g = new UndirectedGraph();
    //     g.add();
    //     g.add();
    //     g.add();
    //     g.add(1, 2);
    //     g.add(1, 3);
    //     g.add();
    //     g.add(1, 4);
    //     Iterator<int[]> currEdges = g.edges();
    //     assertEquals(true, currEdges.hasNext());
    //     int[] arrayOne = {1, 2};
    //     Arrays.equals(arrayOne, currEdges.next());
    //     int[] arrayTwo = {1, 3};
    //     Arrays.equals(arrayTwo, currEdges.next());
    //     int[] arrayThree = {1, 4};
    //     Arrays.equals(arrayThree, currEdges.next());
    // }

    // @Test
    // public void predecessorsUndirected() {
    //     UndirectedGraph g = new UndirectedGraph();
    //     g.add();
    //     g.add();
    //     g.add();
    //     g.add(1, 2);
    //     g.add(3, 2);
    //     g.add();
    //     g.add(4, 2);
    //     Iterator<Integer> currPred = g.predecessors(2);
    //     assertEquals(true, currPred.hasNext());
    //     assertEquals(1, (int) currPred.next());
    //     assertEquals(3, (int) currPred.next());
    //     assertEquals(4, (int) currPred.next());
    //     assertEquals(false, currPred.hasNext());
    // }

    // @Test 
    // public void predecessorUndirected() {
    //     UndirectedGraph g = new UndirectedGraph();
    //     g.add();
    //     g.add();
    //     g.add();
    //     g.add(1, 2);
    //     g.add(1, 3);
    //     g.add();
    //     g.add(1, 4);
    //     g.add();
    //     g.add(5, 3);
    //     assertEquals(1, g.predecessor(3, 0));
    //     assertEquals(5, g.predecessor(3, 1));
    // }

    // @Test
    // public void predecessorDirected() {
    //     DirectedGraph g = new DirectedGraph();
    //     g.add();
    //     g.add();
    //     g.add();
    //     g.add(1, 3);
    //     g.add(2, 3);
    //     assertEquals(2, g.predecessor(3, 1));
    //     assertEquals(1, g.predecessor(3, 0));
    // }


    // @Test
    // public void inDegree() {
    //     DirectedGraph g = new DirectedGraph();
    //     g.add();
    //     g.add();
    //     g.add();
    //     g.add(1, 2);
    //     g.add(3, 2);
    //     g.add();
    //     g.add();
    //     g.add(4, 2);
    //     g.add(5, 2);
    //     g.inDegree(2);
    //     assertEquals(4, g.inDegree(2));
    // }

    // @Test
    // public void edgesIterate() {
    //     UndirectedGraph g = new UndirectedGraph();
    //     g.add();
    //     g.add();
    //     g.add();
    //     g.add(1, 2);
    //     g.add(1, 3);
    //     Iteration<int[]> edges = g.edges();
    //     int[] first = edges.next();
    //     int[] second = edges.next();
    // }

    // @Test
    // public void mine() {
    //     DirectedGraph g = new DirectedGraph();
    //     g.add();
    //     g.add();
    //     g.add();
    //     assertEquals(true, g.mine(1));
    //     assertEquals(false, g.mine(5));
    // }

    // @Test 
    // public void successorUndirected() {
    //     UndirectedGraph g = new UndirectedGraph();
    //     g.add();
    //     g.add();
    //     g.add();
    //     g.add(1, 3);
    //     g.add(1, 2);
    //     System.out.println(g.successor(1, 1));
    //     System.out.println(g.predecessor(2, 0));

    // }

   
 //    @Test
 //    public void containsEdge() {
 //        DirectedGraph g = new DirectedGraph();
 //        g.add();
 //        g.add();
 //        g.add();
 //        g.add(1, 3);
 //        g.contains(1, 3);
 //        assertEquals(true, g.contains(1, 3));
 //        assertEquals(false, g.contains(2, 4));
 //        UndirectedGraph h = new UndirectedGraph();
 //        h.add();
 //        h.add();
 //        h.add();
 //        h.add(1, 3);
 //        assertEquals(true, h.contains(1, 3));
 //        assertEquals(false, h.contains(2, 4));
 //    }

 //    @Test
 //    public void successor() {
 //        DirectedGraph g = new DirectedGraph();
 //        g.add();
 //        g.add();
 //        g.add();
 //        g.add(1, 3);
 //        g.add(3, 2);
 //        g.add(2, 1);
 //        g.add(2, 3);
 //        g.add();
 //        g.remove(2, 1);
 //        g.remove(2);
 //        g.add(1, 4);
 //        g.add();
 //        /** for (int i : g.successors(1)) {
 //         System.out.println(i + ", ");
 //        } */
 //    }

 //    @Test
 //    public void addBadVertex() {
 //        DirectedGraph g = new DirectedGraph();
 //        g.add();
 //        g.add();
 //        g.add();
 //        g.add(1, 3);
 //        g.add(3, 2);
 //        g.add(2, 1);
 //        g.add(2, 3);
 //        g.add();
 //        g.remove(2, 1);
 //        g.remove(2);
 //        g.add(1, 4);
 //        g.add();
 //        g.add(1, 15);
 //    }

 //    @Test 
 //    public void addVertex() {
 //        DirectedGraph g = new DirectedGraph();
 //        g.add();
 //        g.add();
 //        g.add();
 //        g.add(1, 3);
 //        g.add(3, 2);
 //        g.add(2, 1);
 //        g.add(2, 3);
 //        g.add();
 //        g.remove(2, 1);
 //        g.remove(2);
 //        g.add(1, 4);
 //        g.add();
 //        // for (int i : g.vertices()) {
 //        // 	System.out.println(i + ", ");
 //        // }
 //        assertEquals(0, g.predecessor(2, 0));
 //    }


 //    @Test
 //    public void testIterate() {
 //        DirectedGraph g = new DirectedGraph();
 //        g.add();
 //        g.add();
 //        g.add();
 //        g.add(1, 3);
 //        g.add(3, 2);
 //        g.add(2, 1);
 //        g.add(2, 3);
 //        g.add();
 //        g.remove(2, 1);
 //        g.remove(2);
 // //        /** for (int i : g.vertices()) {
 // //            System.out.println(i + ", ");
 // //        }*/
 //    }

 //    @Test
 //    public void removeVertexDirected() {
 //        DirectedGraph g = new DirectedGraph();
 //        g.add();
 //        g.add();
 //        g.add();
 //        g.add(1, 3);
 //        g.add(3, 2);
 //        g.add(2, 1);
 //        g.add(2, 3);
 //        g.add();
 //        g.add(3, 4);
 //        g.remove(2);
 //        Iteration<int[]> currEdges = g.edges();
 //        System.out.println(Arrays.toString(currEdges.next()));
 //        System.out.println(Arrays.toString(currEdges.next()));
 //        System.out.println(currEdges.hasNext());       
 //    }

 //    @Test
 //    public void removeVertexUndirected() {
 //    	UndirectedGraph g = new UndirectedGraph();
 //        g.add();
 //        g.add();
 //        g.add();
 //        g.add(1, 3);
 //        g.add(3, 2);
 //        g.add(2, 1);
 //        g.add(2, 3);
 //        g.add();
 //        g.add(3, 4);
 //        g.remove(2);
 //        Iteration<int[]> currEdges = g.edges();
 //        System.out.println(Arrays.toString(currEdges.next()));
 //        System.out.println(Arrays.toString(currEdges.next()));
 //        System.out.println(currEdges.hasNext());  
 //    }

 //    @Test
 //    public void removeEdges() {
 //        DirectedGraph g = new DirectedGraph();
 //        g.add();
 //        g.add();
 //        g.add();
 //        g.add(1, 3);
 //        g.add(3, 2);
 //        g.add(2, 1);
 //        g.add(2, 3);
 //        g.add();
 //        g.remove(2, 1);
 //        assertEquals(3, g.successor(2, 0));
 //    }


 //    @Test
 //    public void addEdges() {
 //        DirectedGraph g = new DirectedGraph();
 //        g.add();
 //        g.add();
 //        g.add();
 //        g.add(1, 3);
 //        g.add(3, 2);
 //        g.add(2, 1);
 //        g.add();
 //        g.add(4, 3);
 //        assertEquals(2, g.successor(3, 0));
 //        assertEquals(1, g.predecessor(3, 0));
 //        assertEquals(4, g.predecessor(3, 1));
 //        assertEquals(0, g.predecessor(3, 2));
 //        g.add(2, 3);
 //        assertEquals(3, g.successor(2, 1));
 //        g.add(2, 3);
 //    }

 //    @Test
 //    public void _vertexSize() {
 //        UndirectedGraph g = new UndirectedGraph();
 //        g.add();
 //        g.add();
 //        g.add();
 //        assertEquals(3, g.vertexSize());
 //    }

 //    @Test 
 //    public void maxVertex() {
 //        UndirectedGraph g = new UndirectedGraph();
 //        g.add();
 //        g.add();
 //        g.add();
 //        assertEquals(3, g.maxVertex());
 //        // System.out.println(g.maxVertex());
 //    }

 //    @Test 
 //    public void addingGraph() {
 //        UndirectedGraph g = new UndirectedGraph();
 //        g.add();
 //        g.add();
 //        g.add();
 //        assertEquals("Graph has 3 vertices in it", 3, g.vertexSize());
 //        // System.out.println("This graph has three vertices");
 //        g.remove(2);
 //        assertEquals("Graph now has 2 vertices in it", 2, g.vertexSize());
 //    }

 //    @Test
 //    public void emptyGraph() {
 //        DirectedGraph g = new DirectedGraph();
 //        assertEquals("Initial graph has vertices", 0, g.vertexSize());
 //        assertEquals("Initial graph has edges", 0, g.edgeSize());
 //    }

}
