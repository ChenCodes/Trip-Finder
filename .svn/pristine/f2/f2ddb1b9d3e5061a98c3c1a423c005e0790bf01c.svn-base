package graph;

import java.util.ArrayList;
import java.util.Iterator;
/* See restrictions in Graph.java. */

/** Represents an undirected graph.  Out edges and in edges are not
 *  distinguished.  Likewise for successors and predecessors.
 *
 *  @author Yuxi Chen
 */
public class UndirectedGraph extends GraphObj {

    @Override
    public boolean isDirected() {
        return false;
    }

    @Override
    public int inDegree(int v) {
        ArrayList<Integer> pred = this.findUndirected(v);
        int arrivingVertices = pred.size();
        return arrivingVertices;
    }
        
    /** Since the predecessor is simply all the nodes that are connected to it,
    we can just find whichever one we want. */
    @Override
    public int predecessor(int v, int k) {
        ArrayList<Integer> pred = this.findUndirected(v);
        int returnValue = pred.get(k);
        return returnValue;
    }

    @Override
    public Iteration<Integer> predecessors(int v) {
        Iterator<Integer> pred = this.findUndirected(v).iterator();
        Iteration<Integer> predIterate = Iteration.iteration(pred);
        return predIterate;
    }

    // FIXME


}
