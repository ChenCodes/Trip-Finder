package graph;

import org.junit.Test;
import static org.junit.Assert.*;
import java.util.ArrayList;
import java.util.List;


/** Unit tests for the Traversal class.
 *  @author Yuxi Chen
 */
public class TraversalTesting {


    private class FindDFS extends DepthFirstTraversal {

        public FindDFS(Graph G) {
            super(G);
            _G = G;
            _testArrayDFS = new ArrayList<Integer>();
            _testArrayDFSPostVisit = new ArrayList<Integer>();
        }

        protected ArrayList<Integer> getArray() {
            return _testArrayDFS;
        }

        protected ArrayList<Integer> getArrayPostVisit() {
            return _testArrayDFSPostVisit;
        }

        @Override
        protected boolean visit(int v) {
            _testArrayDFS.add(v);
            return super.visit(v);
        }

        @Override
        protected boolean shouldPostVisit(int v) {
            return true;
        }

        @Override
        protected boolean postVisit(int v) {
            _testArrayDFSPostVisit.add(v);
            return super.postVisit(v);
        }

        
        }


    private class FindBFS extends BreadthFirstTraversal {
        public FindBFS(Graph G) {
            super(G);
            _G = G;
            _testArrayBFS = new ArrayList<Integer>();
        }

        protected ArrayList<Integer> getArray() {
            return _testArrayBFS;
        }

        @Override
        protected boolean visit(int v) {
            _testArrayBFS.add(v);
            return super.visit(v);
        }
        /** This holds the array for our BFS. */
       

    }

    // @Test
    // public void autograderOne() {
    //     DirectedGraph g = new DirectedGraph();
    //     g.add(); g.add(); g.add(); g.add(); g.add();
    //     g.add(); g.add(); g.add(); g.add(); g.add();
    //     g.add(1, 2); g.add(2, 5); g.add(2, 6); g.add(1, 3);
    //     g.add(1, 4); g.add(3, 7); g.add(3, 8); g.add(8, 9);
    //     g.add(8, 10); g.add(10, 7); g.add(7, 1); g.add(2, 3);
    //     FindDFS dfs = new FindDFS(g);
    //     dfs.traverse(1);
    //     System.out.println(_testArrayDFS);

    

    // }
    @Test
    public void autograderRemoveUndirected() {
        UndirectedGraph g = new UndirectedGraph();
        g.add(); g.add(); g.add(); g.add(); g.add();
        g.add(); g.add(); g.add(); g.add(); g.add();
        g.add(1, 2); g.add(1, 8); g.add(1, 4); g.add(1, 3);
        g.add(3, 7); g.add(3, 2); g.add(2, 6); g.add(2, 5);
        g.add(8, 10); g.add(8, 9);
        g.remove(2);
        List<Integer> successors = new ArrayList<Integer>();
        for (Integer current : g.successors(1)) {
            successors.add(current);
        }
        System.out.println(successors);

    }

    // @Test
    // public void extraCreditTestDFS() {
    //     DirectedGraph g = new DirectedGraph();
    //     g.add();
    //     g.add();
    //     g.add();
    //     g.add();
    //     g.add();
    //     g.add(5, 4);
    //     g.add(5, 3);
    //     g.add(4, 1);
    //     g.add(3, 2);
    //     g.add(1, 5);
    //     FindDFS dfs = new FindDFS(g);
    //     dfs.traverse(5);

    //     ArrayList<Integer> correctOne = new ArrayList<Integer>();
    //     correctOne.add(5);
    //     correctOne.add(4);
    //     correctOne.add(1);
    //     correctOne.add(3);
    //     correctOne.add(2);
    //     ArrayList<Integer> correctTwo = new ArrayList<Integer>();
    //     correctTwo.add(5);
    //     correctTwo.add(3);
    //     correctTwo.add(2);
    //     correctTwo.add(4);
    //     correctTwo.add(1);
    //     System.out.println(_testArrayDFS);
    //     System.out.println(correctOne);
    //     System.out.println("AAYYYYY");
    //     if (_testArrayDFS.equals(correctOne)) {
    //         assertEquals(5, (int) _testArrayDFS.get(0));
    //         assertEquals(4, (int) _testArrayDFS.get(1));
    //         assertEquals(1, (int) _testArrayDFS.get(2));
    //         assertEquals(3, (int) _testArrayDFS.get(3));
    //         assertEquals(2, (int) _testArrayDFS.get(4));
    //     } else if (_testArrayDFS.equals(correctTwo)) {
    //         assertEquals(5, (int) _testArrayDFS.get(0));
    //         assertEquals(3, (int) _testArrayDFS.get(1));
    //         assertEquals(2, (int) _testArrayDFS.get(2));
    //         assertEquals(4, (int) _testArrayDFS.get(3));
    //         assertEquals(1, (int) _testArrayDFS.get(4));
    //     } else {
    //         throw new AssertionError("uh oh");
    //     }
    //     System.out.println("I passed stuff for my DFS");
    // }


    // @Test
    // public void extraCreditTestDFSPostVisit() {
    //     DirectedGraph g = new DirectedGraph();
    //     g.add();
    //     g.add();
    //     g.add();
    //     g.add();
    //     g.add();
    //     g.add(5, 4);
    //     g.add(5, 3);
    //     g.add(4, 1);
    //     g.add(3, 2);
    //     g.add(1, 5);

    //     FindDFS dfs = new FindDFS(g);
    //     dfs.traverse(5);
    //     ArrayList<Integer> correctOne = new ArrayList<Integer>();
    //     correctOne.add(1);
    //     correctOne.add(4);
    //     correctOne.add(2);
    //     correctOne.add(3);
    //     correctOne.add(5);
    //     ArrayList<Integer> correctTwo = new ArrayList<Integer>();
    //     correctTwo.add(2);
    //     correctTwo.add(3);
    //     correctTwo.add(1);
    //     correctTwo.add(4);
    //     correctTwo.add(5);
    //     System.out.println(_testArrayDFSPostVisit);
       
    //     if (correctOne.equals(_testArrayDFSPostVisit)) {
    //         assertEquals(1, (int) _testArrayDFSPostVisit.get(0));
    //         assertEquals(4, (int) _testArrayDFSPostVisit.get(1));
    //         assertEquals(2, (int) _testArrayDFSPostVisit.get(2));
    //         assertEquals(3, (int) _testArrayDFSPostVisit.get(3));
    //         assertEquals(5, (int) _testArrayDFSPostVisit.get(4));
    //     } else if (correctTwo.equals(_testArrayDFSPostVisit)) {
    //         assertEquals(2, (int) _testArrayDFSPostVisit.get(0));
    //         assertEquals(3, (int) _testArrayDFSPostVisit.get(1));
    //         assertEquals(1, (int) _testArrayDFSPostVisit.get(2));
    //         assertEquals(4, (int) _testArrayDFSPostVisit.get(3));
    //         assertEquals(5, (int) _testArrayDFSPostVisit.get(4));
    //     } else {
    //         throw new AssertionError("Uh Oh");
    //     }

    // }

    // @Test
    // public void extraCreditTestBFS() {
    //     DirectedGraph g = new DirectedGraph();
    //     g.add();
    //     g.add();
    //     g.add();
    //     g.add();
    //     g.add();
    //     g.add(5, 4);
    //     g.add(5, 3);
    //     g.add(4, 1);
    //     g.add(3, 2);
    //     g.add(1, 5);
    //     FindBFS bfs = new FindBFS(g);
    //     bfs.traverse(5);

    //     ArrayList<Integer> correctOne = new ArrayList<Integer>();
    //     correctOne.add(5);
    //     correctOne.add(4);
    //     correctOne.add(3);
    //     correctOne.add(1);
    //     correctOne.add(2);
    //     ArrayList<Integer> correctTwo = new ArrayList<Integer>();
    //     correctTwo.add(5);
    //     correctTwo.add(3);
    //     correctTwo.add(4);
    //     correctTwo.add(2);
    //     correctTwo.add(1);
    //     ArrayList<Integer> correctThree = new ArrayList<Integer>();
    //     correctThree.add(5);
    //     correctThree.add(4);
    //     correctThree.add(3);
    //     correctThree.add(2);
    //     correctThree.add(1);
    //     ArrayList<Integer> correctFour = new ArrayList<Integer>();
    //     correctFour.add(5);
    //     correctFour.add(3);
    //     correctFour.add(4);
    //     correctFour.add(1);
    //     correctFour.add(2);

    //     System.out.println(_testArrayBFS);
    //     if (correctOne.equals(_testArrayBFS)) {
    //         System.out.println("This is good. ONE");
    //     } else if (correctTwo.equals(_testArrayBFS)) {
    //         System.out.println("This is good. TWO");
    //     } else if (correctThree.equals(_testArrayBFS)) {
    //         System.out.println("This is good. THREE");
    //     } else if (correctFour.equals(_testArrayBFS)) {
    //         System.out.println("This is good. FOUR");
    //     } else {
    //         throw new AssertionError("Uh Oh");
    //     }
    // }


    // @Test 
    // public void test4() {
    //     UndirectedGraph g = new UndirectedGraph();
    //     LabeledGraph<Integer, Double> l =
    //     new LabeledGraph<Integer, Double>(g);
    //     l.add(); 
    //     l.add();
    //     l.add(2, 1, 100.0);
        
    //     System.out.println(l.getLabel(1, 2)); 
    //     assertEquals(l.getLabel(1, 2), (Double) 100.0);
    // }

    // @Test
    // public void test5() {
    //     DirectedGraph g = new DirectedGraph();
    //     LabeledGraph<Integer, Double> l = 
    //     new LabeledGraph<Integer, Double>(g);
    //     l.add();
    //     l.add();
    //     l.add(1, 2, 100.0);
    //     l.add(2, 1, 200.0);
    //     assertEquals(l.getLabel(1, 2), (Double) 100.0);
    //     assertEquals(l.getLabel(2, 1), (Double) 200.0);
    // }








    private ArrayList<Integer> _testArrayDFSPostVisit;

    /** This holds the array for our DFS. */
    private ArrayList<Integer> _testArrayDFS;

    private ArrayList<Integer> _testArrayBFS;

    private Graph _G;


    
}
