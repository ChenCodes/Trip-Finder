package graph;

import org.junit.Test;
import static org.junit.Assert.*;
import static java.util.Arrays.asList;

import java.util.Iterator;
import java.util.Arrays;
import java.util.ArrayList;


/** Unit tests for the Traversal class.
 *  @author Yuxi Chen
 */
public class ShortestPathsTesting {

    @Test
    public void extraCreditTestDFS() {
    	DirectedGraph g = new DirectedGraph();
    	g.add();
    	g.add();
    	g.add();
    	g.add();
    	g.add();
    	g.add(5, 4);
    	g.add(5, 3);
    	g.add(4, 1);
    	g.add(3, 2);
    	g.add(1, 5);
    	FindDFS dfs = new FindDFS(g);
    	dfs.traverse(5);

        ArrayList<Integer> correctOne = new ArrayList<Integer>();
        correctOne.add(5);
        correctOne.add(3);
        correctOne.add(2);
        correctOne.add(4);
        correctOne.add(1);
        ArrayList<Integer> correctTwo = new ArrayList<Integer>();
        correctTwo.add(5);
        correctTwo.add(4);
        correctTwo.add(1);
        correctTwo.add(3);
        correctTwo.add(2);


        if (correctOne.equals(dfs.getArray())) {
            assertEquals(5, (int) dfs.getArray().get(0));
            assertEquals(3, (int) dfs.getArray().get(1));
            assertEquals(2, (int) dfs.getArray().get(2));
            assertEquals(4, (int) dfs.getArray().get(3));
            assertEquals(1, (int) dfs.getArray().get(4));

        } else if (correctTwo.equals(dfs.getArray())) {
            assertEquals(5, (int) dfs.getArray().get(0));
            assertEquals(4, (int) dfs.getArray().get(1));
            assertEquals(1, (int) dfs.getArray().get(2));
            assertEquals(3, (int) dfs.getArray().get(3));
            assertEquals(2, (int) dfs.getArray().get(4));
        } else {
            throw new AssertionError("Uh Oh");
        }
    }

   

   


    private ArrayList<Integer> _testArrayDFSPostVisit;

    /** This holds the array for our DFS. */
    private ArrayList<Integer> _testArrayDFS;

    /** This holds the array for our BFS. */
    private ArrayList<Integer> _testArrayBFS;

    /** This holds a copy of the graph that we're working with. */
    private Graph _G;
}
