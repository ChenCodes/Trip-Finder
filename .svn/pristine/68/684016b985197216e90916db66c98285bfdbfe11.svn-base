package graph;

/* See restrictions in Graph.java. */

import java.util.Arrays;
import java.util.Collection;
import java.util.Queue;
import java.util.HashSet;
import java.util.Stack;
import java.util.LinkedList;

/** Implements a generalized traversal of a graph.  At any given time,
 *  there is a particular collection of untraversed vertices---the "fringe."
 *  Traversal consists of repeatedly removing an untraversed vertex
 *  successors to the fringe.
 *   *  from the fringe, visting it, and then adding its untraversed

 *  Generally, the client will extend Traversal.  By overriding the visit
 *  method, the client can determine what happens when a node is visited.
 *  By supplying an appropriate type of Queue object to the constructor,
 *  the client can control the behavior of the fringe. By overriding the
 *  shouldPostVisit and postVisit methods, the client can arrange for
 *  post-visits of a node (as in depth-first search).  By overriding
 *  the reverseSuccessors and processSuccessor methods, the client can control
 *  the addition of neighbor vertices to the fringe when a vertex is visited.
 *
 *  Traversals may be interrupted or restarted, remembering the previously
 *  marked vertices.
 *  @author Yuxi Chen
 */
public abstract class Traversal {

    /** A Traversal of G, using FRINGE as the fringe. */
    protected Traversal(Graph G, Queue<Integer> fringe) {
        _G = G;
        _fringe = fringe;
        _marked = new HashSet<Integer>();
        _fringeStack = new Stack<Integer>();
        _reachableSet = new HashSet<Integer>();
        currentQueue = new LinkedList<Integer>();
    }

    /** Unmark all vertices in the graph. */
    public void clear() {
        _marked = new HashSet<Integer>();
    }
    /** This gets the marked vertices for us. */
    public HashSet<Integer> getMarked() {
        return _marked;
    }

    /** This tells us what kind of graph we're dealing with. */
    public abstract boolean isDFS();

    /** Initialize the fringe to V0 and perform a traversal. */
    public void traverse(Collection<Integer> V0) {
        if (isDFS()) {
            for(Integer current : V0) {
                _fringe.add(current);
            }

            _fringeStack.push(_fringe.remove());
            while (!_fringeStack.isEmpty()) {
                Integer v = _fringeStack.pop();
                System.out.println("The integer we just popped from stack is: " + v);
                if (!_marked.contains(v)) {
                    mark(v);
                    _reachableSet.add(v);
                    System.out.println("We just added this guy: " + v);
                    visit(v);
                    // if (visit(v)) {
                    //     System.out.println("we were able to visit this guy.");
                    // }
                }
            }
        } else {
            for (Integer current : V0) {
                _fringe.add(current);
            }
            Integer currentItem = _fringe.remove();
            currentQueue.add(currentItem);
            while(!currentQueue.isEmpty()) {
                Integer v = currentQueue.remove();
                if (!_marked.contains(v)) {
                    mark(v);
                    _reachableSet.add(v);
                    visit(v);
                    // if (visit(v)) {
                    //     System.out.println("I'm a BFS");
                    // }
                }
            }

        } 
        // for (Integer current : _reachableSet) {
        //     System.out.println(current);
        // }
    }

    /** Initialize the fringe to { V0 } and perform a traversal. */
    public void traverse(int v0) {
        System.out.println("Is this one called?" + v0);
        // _fringe.add(v0);
        traverse(Arrays.<Integer>asList(v0));
    }

    /** Returns true iff V has been marked. */
    protected boolean marked(int v) {
        if (_marked.contains(v)) {
            return true;
        }
        return false;
    }

    /** Mark vertex V. */
    protected void mark(int v) {
        _marked.add(v);
    }

    /** Perform a visit on vertex V.  Returns false iff the traversal is to
     *  terminate immediately. */
    protected boolean visit(int v) {
        return true;
    }

    /** Return true if we should postVisit V after traversing its
     *  successors.  (Post-visiting generally is useful only for depth-first
     *  traversals, although we define it for all traversals.) */
    protected boolean shouldPostVisit(int v) {
        return false;
    }

    /** Revisit vertex V after traversing its successors.  Returns false iff
     *  the traversal is to terminate immediately. */
    protected boolean postVisit(int v) {
        return true;
    }

    /** Return true if we should schedule successors of V in reverse order. */
    protected boolean reverseSuccessors(int v) {
        return false;
    }

    /** Process successor V to U.  Returns true iff V is then to
     *  be added to the fringe.  By default, returns true iff V is unmarked. */
    protected boolean processSuccessor(int u, int v) {
        return !marked(v);
    }

    /** The graph being traversed. */
    private final Graph _G;

    /** The fringe. */
    protected final Queue<Integer> _fringe;

    /** HashSet containing all the marked vertices. */
    private HashSet<Integer> _marked;

    /** Stack containing current fringe. */
    public Stack<Integer> _fringeStack;

    /** Queue containing current queue. */
    public Queue<Integer> currentQueue;

    /** This shows the things that we have reached. */
    private HashSet<Integer> _reachableSet;

}
